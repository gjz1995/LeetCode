{"compress":true,"commitItems":[["a1d63e13-8549-4c2d-bdb2-e00a87290846",1567346704835,"本文详解「滑动窗口」这种高级双指针技巧的算法框架，带你秒杀几道难度较大的子字符串匹配问题：\n\n76. 最小覆盖子串\n\n438. 找到字符串中所有字母异位词\n\n3. 无重复字符的最长子串\n\n最后抽象出一个简单的滑动窗口算法框架。\n\n力扣上至少有 9 道题目可以用此方法高效解决。但是有几道是 VIP 题目，有几道题目虽不难但太复杂，所以本文只选择点赞最高，较为经典的，最能够讲明白的三道题来讲解。第一题为了让读者掌握算法模板，篇幅相对长，后两题就基本秒杀了。\n\n本文代码为 C++ 实现，不会用到什么编程方面的奇技淫巧，但是还是简单介绍一下一些用到的数据结构，以免有的读者因为语言的细节问题阻碍对算法思想的理解：\n\nunordered_map 就是哈希表（字典），它的一个方法 count(key) 相当于 containsKey(key) 可以判断键 key 是否存在。\n\n可以使用方括号访问键对应的值 map[key]。需要注意的是，如果该 key 不存在，C++ 会自动创建这个 key，并把 map[key] 赋值为 0。\n\n所以代码中多次出现的 map[key]++ 相当于 Java 的 map.put(key, map.getOrDefault(key, 0) + 1)。\n\n本文大部分代码都是图片形式，可以点开放大，更重要的是可以左右滑动方便对比代码。下面进入正题。\n\n一、最小覆盖子串\n题目链接\n\n题目不难理解，就是说要在 S(source) 中找到包含 T(target) 中全部字母的一个子串，顺序无所谓，但这个子串一定是所有可能子串中最短的。\n\n如果我们使用暴力解法，代码大概是这样的：\n\nfor (int i = 0; i < s.size(); i++)\n    for (int j = i + 1; j < s.size(); j++)\n        if s[i:j] 包含 t 的所有字母:\n            更新答案\n思路很直接吧，但是显然，这个算法的复杂度肯定大于 O(N^2) 了，不好。\n\n滑动窗口算法的思路是这样：\n\n1、我们在字符串 S 中使用双指针中的左右指针技巧，初始化 left = right = 0，把索引闭区间 [left, right] 称为一个「窗口」。\n\n2、我们先不断地增加 right 指针扩大窗口 [left, right]，直到窗口中的字符串符合要求（包含了 T 中的所有字符）。\n\n3、此时，我们停止增加 right，转而不断增加 left 指针缩小窗口 [left, right]，直到窗口中的字符串不再符合要求（不包含 T 中的所有字符了）。同时，每次增加 left，我们都要更新一轮结果。\n\n4、重复第 2 和第 3 步，直到 right 到达字符串 S 的尽头。\n\n这个思路其实也不难，第 2 步相当于在寻找一个「可行解」，然后第 3 步在优化这个「可行解」，最终找到最优解。左右指针轮流前进，窗口大小增增减减，窗口不断向右滑动。\n\n下面画图理解一下，needs 和 window 相当于计数器，分别记录 T 中字符出现次数和窗口中的相应字符的出现次数。\n\n初始状态：\n\n\n\n增加 right，直到窗口 [left, right] 包含了 T 中所有字符：\n\n\n\n现在开始增加 left，缩小窗口 [left, right]。\n\n\n\n直到窗口中的字符串不再符合要求，left 不再继续移动。\n\n\n\n之后重复上述过程，先移动 right，再移动 left…… 直到 right 指针到达字符串 S 的末端，算法结束。\n\n如果你能够理解上述过程，恭喜，你已经完全掌握了滑动窗口算法思想。至于如何具体到问题，如何得出此题的答案，都是编程问题，等会提供一套模板，理解一下就会了。\n\n上述过程可以简单地写出如下伪码框架：\n\nstring s, t;\n// 在 s 中寻找 t 的「最小覆盖子串」\nint left = 0, right = 0;\nstring res = s;\n\nwhile(right < s.size()) {\n    window.add(s[right]);\n    right++;\n    // 如果符合要求，移动 left 缩小窗口\n    while (window 符合要求) {\n        // 如果这个窗口的子串更短，则更新 res\n        res = minLen(res, window);\n        window.remove(s[left]);\n        left++;\n    }\n}\nreturn res;\n如果上述代码你也能够理解，那么你离解题更近了一步。关注我的众公号 labuladong 看更多精彩算法文章。现在就剩下一个比较棘手的问题：如何判断 window 即子串 s[left...right] 是否符合要求，是否包含 t 的所有字符呢？\n\n可以用两个哈希表当作计数器解决。用一个哈希表 needs 记录字符串 t 中包含的字符及出现次数，用另一个哈希表 window 记录当前「窗口」中包含的字符及出现的次数，如果 window 包含所有 needs 中的键，且这些键对应的值都大于等于 needs 中的值，那么就可以知道当前「窗口」符合要求了，可以开始移动 left 指针了。\n\n现在将上面的框架继续细化：\n\nstring s, t;\n// 在 s 中寻找 t 的「最小覆盖子串」\nint left = 0, right = 0;\nstring res = s;\n\n// 相当于两个计数器\nunordered_map<char, int> window;\nunordered_map<char, int> needs;\nfor (char c : t) needs[c]++;\n\n// 记录 window 中已经有多少字符符合要求了\nint match = 0; \n\nwhile (right < s.size()) {\n    char c1 = s[right];\n    if (needs.count(c1)) {\n        window[c1]++; // 加入 window\n        if (window[c1] == needs[c1])\n            // 字符 c1 的出现次数符合要求了\n            match++;\n    }\n    right++;\n\n    // window 中的字符串已符合 needs 的要求了\n    while (match == needs.size()) {\n        // 更新结果 res\n        res = minLen(res, window);\n        char c2 = s[left];\n        if (needs.count(c2)) {\n            window[c2]--; // 移出 window\n            if (window[c2] < needs[c2])\n                // 字符 c2 出现次数不再符合要求\n                match--;\n        }\n        left++;\n    }\n}\nreturn res;\n上述代码已经具备完整的逻辑了，只有一处伪码，即更新 res 的地方，不过这个问题太好解决了，直接看解法吧！\n\nstring minWindow(string s, string t) {\n    // 记录最短子串的开始位置和长度\n    int start = 0, minLen = INT_MAX;\n    int left = 0, right = 0;\n    \n    unordered_map<char, int> window;\n    unordered_map<char, int> needs;\n    for (char c : t) needs[c]++;\n    \n    int match = 0;\n    \n    while (right < s.size()) {\n        char c1 = s[right];\n        if (needs.count(c1)) {\n            window[c1]++;\n            if (window[c1] == needs[c1]) \n                match++;\n        }\n        right++;\n        \n        while (match == needs.size()) {\n            if (right - left < minLen) {\n                // 更新最小子串的位置和长度\n                start = left;\n                minLen = right - left;\n            }\n            char c2 = s[left];\n            if (needs.count(c2)) {\n                window[c2]--;\n                if (window[c2] < needs[c2])\n                    match--;\n            }\n            left++;\n        }\n    }\n    return minLen == INT_MAX ?\n                \"\" : s.substr(start, minLen);\n}\n如果直接甩给你这么一大段代码，我想你的心态是爆炸的，但是通过之前的步步跟进，你是否能够理解这个算法的内在逻辑呢？你是否能清晰看出该算法的结构呢？\n\n这个算法的时间复杂度是 O(M + N)，M 和 N 分别是字符串 S 和 T 的长度。因为我们先用 for 循环遍历了字符串 T 来初始化 needs，时间 O(N)，之后的两个 while 循环最多执行 2M 次，时间 O(M)。\n\n读者也许认为嵌套的 while 循环复杂度应该是平方级，但是你这样想，while 执行的次数就是双指针 left 和 right 走的总路程，最多是 2M 嘛。\n\n二、找到字符串中所有字母异位词\n题目链接\n\n这道题的难度是 Easy，但是评论区点赞最多的一条是这样：\n\nHow can this problem be marked as easy???\n\n实际上，这个 Easy 是属于了解双指针技巧的人的，只要把上一道题的代码改中更新 res 部分的代码稍加修改就成了这道题的解：\n\nvector<int> findAnagrams(string s, string t) {\n    // 用数组记录答案\n    vector<int> res;\n    int left = 0, right = 0;\n    unordered_map<char, int> needs;\n    unordered_map<char, int> window;\n    for (char c : t) needs[c]++;\n    int match = 0;\n    \n    while (right < s.size()) {\n        char c1 = s[right];\n        if (needs.count(c1)) {\n            window[c1]++;\n            if (window[c1] == needs[c1])\n                match++;\n        }\n        right++;\n\n        while (match == needs.size()) {\n            // 如果 window 的大小合适\n            // 就把起始索引 left 加入结果\n            if (right - left == t.size()) {\n                res.push_back(left);\n            }\n            char c2 = s[left];\n            if (needs.count(c2)) {\n                window[c2]--;\n                if (window[c2] < needs[c2])\n                    match--;\n            }\n            left++;\n        }\n    }\n    return res;\n}\n因为这道题和上一道的场景类似，也需要 window 中包含串 t 的所有字符，但上一道题要找长度最短的子串，这道题要找长度相同的子串，也就是「字母异位词」嘛。\n\n三、无重复字符的最长子串\n题目链接\n\n遇到子串问题，首先想到的就是滑动窗口技巧。\n\n类似之前的思路，使用 window 作为计数器记录窗口中的字符出现次数，然后先向右移动 right，当 window 中出现重复字符时，开始移动 left 缩小窗口，如此往复：\n\nint lengthOfLongestSubstring(string s) {\n    int left = 0, right = 0;\n    unordered_map<char, int> window;\n    int res = 0; // 记录最长长度\n\n    while (right < s.size()) {\n        char c1 = s[right];\n        window[c1]++;\n        right++;\n        // 如果 window 中出现重复字符\n        // 开始移动 left 缩小窗口\n        while (window[c1] > 1) {\n            char c2 = s[left];\n            window[c2]--;\n            left++;\n        }\n        res = max(res, right - left);\n    }\n    return res;\n}\n需要注意的是，因为我们要求的是最长子串，所以需要在每次移动 right 增大窗口时更新 res，而不是像之前的题目在移动 left 缩小窗口时更新 res。\n\n最后总结\n通过上面三道题，我们可以总结出滑动窗口算法的抽象思想：\n\nint left = 0, right = 0;\n\nwhile (right < s.size()) {\n    window.add(s[right]);\n    right++;\n    \n    while (valid) {\n        window.remove(s[left]);\n        left++;\n    }\n}\n其中 window 的数据类型可以视具体情况而定，比如上述题目都使用哈希表充当计数器，当然你也可以用一个数组实现同样效果，因为我们只处理英文字母。\n\n稍微麻烦的地方就是这个 valid 条件，为了实现这个条件的实时更新，我们可能会写很多代码。比如前两道题，看起来解法篇幅那么长，实际上思想还是很简单，只是大多数代码都在处理这个问题而已。\n\n作者：labuladong\n链接：https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/solution/hua-dong-chuang-kou-tong-yong-si-xiang-jie-jue-zi-/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。",[[1567346653437,["GJX@GJXAIOU",[[-1,58,"\n"]],[58,58],[57,57]]],[1567346653479,["GJX@GJXAIOU",[[1,57,"\\"]],[57,57],[58,58]]],[1567346654857,["GJX@GJXAIOU",[[-1,57,"\\"]],[58,58],[57,57]]],[1567346655821,["GJX@GJXAIOU",[[-1,77,"\n"]],[77,77],[76,76]]],[1567346756860,["GJX@GJXAIOU",[[1,590,"## "]],[590,590],[601,601]]],[1567346762460,["GJX@GJXAIOU",[[-1,602,"题目链接"]],[602,606],[602,602]]],[1567346786973,["GJX@GJXAIOU",[[1,603,"### 题目"]],[603,603],[609,609]]],[1567346787396,["GJX@GJXAIOU",[[1,610,"\n"]],[609,609],[610,610]]],[1567346788374,["GJX@GJXAIOU",[[1,610,"给你一个字符串 S、一个字符串 T，请在字符串 S 里面找出：包含 T 所有字母的最小子串。\n\n示例：\n\n输入: S = \"ADOBECODEBANC\", T = \"ABC\"\n输出: \"BANC\"\n说明：\n\n如果 S 中不存这样的子串，则返回空字符串 \"\"。\n如果 S 中存在这样的子串，我们保证它是唯一的答案。\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/minimum-window-substring\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。"]],[610,610],[879,879]]],[1567346791875,["GJX@GJXAIOU",[[-1,768,"来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/minimum-window-substring\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。"]],[768,879],[768,768]]],[1567346793125,["GJX@GJXAIOU",[[-1,713,"\n"]],[713,713],[712,712]]],[1567346794278,["GJX@GJXAIOU",[[1,709,"\n"]],[709,709],[710,710]]],[1567346795215,["GJX@GJXAIOU",[[-1,662,"\n"]],[662,662],[661,661]]],[1567346844725,["GJX@GJXAIOU",[[1,866,"··"]],[866,866],[868,868]]],[1567346845317,["GJX@GJXAIOU",[[-1,866,"··"]],[868,868],[866,866]]],[1567346847583,["GJX@GJXAIOU",[[1,866,"```"]],[866,866],[869,869]]],[1567346847631,["GJX@GJXAIOU",[[1,869,"language\n```\n"]],[869,869],[869,877]]],[1567346848673,["GJX@GJXAIOU",[[-1,869,"language"],[1,877,"j"]],[869,877],[870,870]]],[1567346849038,["GJX@GJXAIOU",[[1,870,"ava"]],[870,870],[873,873]]],[1567346849188,["GJX@GJXAIOU",[[1,874,"\n"]],[873,873],[874,874]]],[1567346852662,["GJX@GJXAIOU",[[-1,880,"for (int i = 0; i < s.size(); i++)\n    for (int j = i + 1; j < s.size(); j++)\n        if s[i:j] 包含 t 的所有字母:\n            更新答案"]],[880,1004],[880,880]]],[1567346854045,["GJX@GJXAIOU",[[1,874,"for (int i = 0; i < s.size(); i++)\n    for (int j = i + 1; j < s.size(); j++)\n        if s[i:j] 包含 t 的所有字母:\n            更新答案"]],[874,874],[998,998]]],[1567346856670,["GJX@GJXAIOU",[[-1,1004,"\n"]],[1004,1004],[1003,1003]]],[1567346858388,["GJX@GJXAIOU",[[-1,1003,"\n"]],[1003,1003],[1002,1002]]],[1567346862237,["GJX@GJXAIOU",[[1,1042,"**"],[1,1054,"**"]],[1042,1054],[1042,1058]]],[1567346870326,["GJX@GJXAIOU",[[1,607,"()"]],[607,607],[609,609]]],[1567346872076,["GJX@GJXAIOU",[[-1,607,"()"]],[609,609],[607,607]]],[1567346872641,["GJX@GJXAIOU",[[1,607,"（）"]],[607,607],[609,609]]],[1567346874329,["GJX@GJXAIOU",[[1,608,"一"]],[608,608],[609,609]]],[1567346900596,["GJX@GJXAIOU",[[-1,770,"\n"]],[770,770],[769,769]]],[1567346903232,["GJX@GJXAIOU",[[1,847,"\n"]],[846,846],[847,847]]],[1567346905433,["GJX@GJXAIOU",[[1,847,"### （）"]],[847,847],[853,853]]],[1567346907094,["GJX@GJXAIOU",[[1,852,"二"]],[852,852],[853,853]]],[1567346908825,["GJX@GJXAIOU",[[1,854,"解答"]],[854,854],[856,856]]],[1567346949709,["GJX@GJXAIOU",[[-1,1073,"1、"]],[1073,1075],[1073,1073]]],[1567346950078,["GJX@GJXAIOU",[[1,1073,"- "]],[1073,1073],[1075,1075]]],[1567346952751,["GJX@GJXAIOU",[[-1,1152,"2、"]],[1152,1154],[1152,1152]]],[1567346953104,["GJX@GJXAIOU",[[1,1152,"- "]],[1152,1152],[1154,1154]]],[1567346955845,["GJX@GJXAIOU",[[-1,1220,"3、"]],[1220,1222],[1220,1220]]],[1567346956223,["GJX@GJXAIOU",[[1,1220,"- "]],[1220,1220],[1222,1222]]],[1567346958508,["GJX@GJXAIOU",[[-1,1328,"4、"]],[1328,1330],[1328,1328]]],[1567346958894,["GJX@GJXAIOU",[[1,1328,"- "]],[1328,1328],[1330,1330]]],[1567346997945,["GJX@GJXAIOU",[[1,1518,"![初始状态]($resource/%E5%88%9D%E5%A7%8B%E7%8A%B6%E6%80%81.png)"]],[1518,1518],[1578,1578]]],[1567347006812,["GJX@GJXAIOU",[[-1,1579,"\n"]],[1579,1579],[1578,1578]]],[1567347058600,["GJX@GJXAIOU",[[1,1621,"![迭代增加right]($resource/%E8%BF%AD%E4%BB%A3%E5%A2%9E%E5%8A%A0right.png)"]],[1621,1621],[1691,1691]]],[1567347066197,["GJX@GJXAIOU",[[1,1725,"![迭代增加left]($resource/%E8%BF%AD%E4%BB%A3%E5%A2%9E%E5%8A%A0left.png)"]],[1725,1725],[1793,1793]]],[1567347073700,["GJX@GJXAIOU",[[1,1824,"![结果]($resource/%E7%BB%93%E6%9E%9C.png)"]],[1824,1824],[1864,1864]]],[1567347146642,["GJX@GJXAIOU",[[1,2022,"···"]],[2022,2022],[2025,2025]]],[1567347147796,["GJX@GJXAIOU",[[-1,2022,"···"]],[2025,2025],[2022,2022]]],[1567347149063,["GJX@GJXAIOU",[[1,2022,"```"]],[2022,2022],[2025,2025]]],[1567347149094,["GJX@GJXAIOU",[[1,2025,"language\n```\n"]],[2025,2025],[2025,2033]]],[1567347150054,["GJX@GJXAIOU",[[-1,2025,"language"],[1,2033,"j"]],[2025,2033],[2026,2026]]],[1567347150406,["GJX@GJXAIOU",[[1,2026,"ava"]],[2026,2026],[2029,2029]]],[1567347153168,["GJX@GJXAIOU",[[-1,2030,"```"]],[2030,2033],[2030,2030]]],[1567347155861,["GJX@GJXAIOU",[[1,2362,"\n"]],[2361,2361],[2362,2362]]],[1567347156295,["GJX@GJXAIOU",[[1,2362,"```"]],[2362,2362],[2365,2365]]],[1567347158365,["GJX@GJXAIOU",[[-1,2031,"\n"]],[2031,2031],[2030,2030]]],[1567347158484,["GJX@GJXAIOU",[[-1,2030,"\n"]],[2030,2030],[2029,2029]]],[1567347190467,["GJX@GJXAIOU",[[-1,2389,"关注我的众公号 labuladong 看更多精彩算法文章。"]],[2389,2417],[2388,2388]]],[1567347213452,["GJX@GJXAIOU",[[1,2404,"**"],[1,2456,"**"]],[2404,2456],[2404,2460]]],[1567347224328,["GJX@GJXAIOU",[[1,2648,"```"]],[2648,2648],[2651,2651]]],[1567347224359,["GJX@GJXAIOU",[[1,2651,"language\n```\n"]],[2651,2651],[2651,2659]]],[1567347225318,["GJX@GJXAIOU",[[-1,2651,"language"],[1,2659,"j"]],[2651,2659],[2652,2652]]],[1567347225655,["GJX@GJXAIOU",[[1,2652,"ava"]],[2652,2652],[2655,2655]]],[1567347225956,["GJX@GJXAIOU",[[1,2656,"\n"]],[2655,2655],[2656,2656]]],[1567347228560,["GJX@GJXAIOU",[[-1,2657,"```"]],[2657,2660],[2657,2657]]],[1567347237548,["GJX@GJXAIOU",[[1,3480,"\n"]],[3479,3479],[3480,3480]]],[1567347238429,["GJX@GJXAIOU",[[1,3480,"```"]],[3480,3480],[3483,3483]]],[1567347242575,["GJX@GJXAIOU",[[-1,2658,"\n"]],[2658,2658],[2657,2657]]],[1567347242741,["GJX@GJXAIOU",[[-1,2657,"\n"]],[2657,2657],[2656,2656]]],[1567347243165,["GJX@GJXAIOU",[[-1,2656,"\n"]],[2656,2656],[2655,2655]]],[1567347345609,["GJX@GJXAIOU",[[1,3535,"```"]],[3535,3535],[3538,3538]]],[1567347345640,["GJX@GJXAIOU",[[1,3538,"language\n```\n"]],[3538,3538],[3538,3546]]],[1567347347016,["GJX@GJXAIOU",[[-1,3538,"language"],[1,3546,"j"]],[3538,3546],[3539,3539]]],[1567347347400,["GJX@GJXAIOU",[[1,3539,"ava"]],[3539,3539],[3542,3542]]],[1567347349988,["GJX@GJXAIOU",[[-1,3543,"```"]],[3543,3546],[3543,3543]]],[1567347353030,["GJX@GJXAIOU",[[1,4525,"\n"]],[4524,4524],[4525,4525]]],[1567347353462,["GJX@GJXAIOU",[[1,4525,"```"]],[4525,4525],[4528,4528]]],[1567347356309,["GJX@GJXAIOU",[[-1,3544,"\n"]],[3544,3544],[3543,3543]]],[1567347356451,["GJX@GJXAIOU",[[-1,3543,"\n"]],[3543,3543],[3542,3542]]],[1567347364037,["GJX@GJXAIOU",[[-1,3538,"java"]],[3542,3542],[3538,3538]]],[1567347364609,["GJX@GJXAIOU",[[1,3538,"cpp"]],[3538,3538],[3541,3541]]],[1567347368332,["GJX@GJXAIOU",[[-1,2651,"java"]],[2655,2655],[2651,2651]]],[1567347369233,["GJX@GJXAIOU",[[1,2651,"cpp"]],[2651,2651],[2654,2654]]],[1567347373052,["GJX@GJXAIOU",[[-1,2025,"java"]],[2029,2029],[2025,2025]]],[1567347373706,["GJX@GJXAIOU",[[1,2025,"cpp"]],[2025,2025],[2028,2028]]]],null,"GJX@GJXAIOU"]]}